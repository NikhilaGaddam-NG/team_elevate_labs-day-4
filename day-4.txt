# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    confusion_matrix,
    precision_score,
    recall_score,
    roc_auc_score,
    roc_curve,
    classification_report
)

# 1. Load a binary classification dataset
data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)

# 2. Train/test split and standardize features
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 3. Fit a Logistic Regression model
model = LogisticRegression(max_iter=10000, random_state=42)
model.fit(X_train_scaled, y_train)

# 4. Evaluate the model
y_pred = model.predict(X_test_scaled)
y_pred_proba = model.predict_proba(X_test_scaled)[:, 1]  # Probabilities for class 1

# Confusion Matrix
conf_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_mat)

# Precision, Recall, ROC-AUC
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred_proba)

print(f"\nPrecision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"ROC-AUC Score: {roc_auc:.4f}")

# Full Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Plot ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label=f'Logistic Regression (AUC = {roc_auc:.2f})')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid()
plt.show()

# 5. Tune threshold
# Default threshold is 0.5; let's change it to 0.3
threshold = 0.3
y_pred_custom = (y_pred_proba >= threshold).astype(int)

# New Confusion Matrix
conf_mat_custom = confusion_matrix(y_test, y_pred_custom)
print(f"\nConfusion Matrix with threshold = {threshold}:")
print(conf_mat_custom)

# New precision and recall
precision_custom = precision_score(y_test, y_pred_custom)
recall_custom = recall_score(y_test, y_pred_custom)

print(f"\nPrecision (threshold={threshold}): {precision_custom:.4f}")
print(f"Recall (threshold={threshold}): {recall_custom:.4f}")

# Sigmoid Function Explanation
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Plot the sigmoid function
z = np.linspace(-10, 10, 200)
sigmoid_values = sigmoid(z)

plt.figure(figsize=(8,6))
plt.plot(z, sigmoid_values)
plt.title("Sigmoid Function")
plt.xlabel("z (linear combination of inputs)")
plt.ylabel("Sigmoid(z)")
plt.grid()
plt.show()

print("\nSigmoid Function Explanation:")
print("""
The Sigmoid function maps any real-valued number into the (0, 1) interval.
In logistic regression, the output of the sigmoid function represents the probability
that a given input belongs to the positive class (label 1).
If the probability is greater than a threshold (default 0.5), we classify as 1, else 0.
Changing the threshold (e.g., 0.3) adjusts the trade-off between precision and recall.
""")
